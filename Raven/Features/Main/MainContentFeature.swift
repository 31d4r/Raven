//
//  MainContentFeature.swift
//  Parrot
//
//  Created by Eldar Tutnjic on 25.07.25.
//

import SwiftUI

extension MainContentView {
    struct MainContentState {
        var questionText = ""
        var promptText = ""
        var responseText = ""
        var isProcessing = false
        var errorMessage: String?
    }
    
    enum Action {
        case updateQuestion(String)
        case processQuestion(String, Project)
        case clearResponse
        case copyResponse
    }
    
    @Observable
    class MainContentFeature {
        private(set) var state = MainContentState()
        private let foundationsManager = FoundationsManager()
    }
}

// MARK: - Utils

extension MainContentView.MainContentFeature {
    func send(_ action: MainContentView.Action) {
        Task {
            await handle(action)
        }
    }
    
    func value<T>(_ keyPath: KeyPath<MainContentView.MainContentState, T>) -> T {
        state[keyPath: keyPath]
    }

    func set<T>(_ keyPath: WritableKeyPath<MainContentView.MainContentState, T>, to value: T) {
        state[keyPath: keyPath] = value
    }

    func binding<T>(for keyPath: WritableKeyPath<MainContentView.MainContentState, T>) -> Binding<T> {
        Binding<T>(
            get: { self.state[keyPath: keyPath] },
            set: { newValue in
                self.state[keyPath: keyPath] = newValue
            }
        )
    }
}

// MARK: - Actions

extension MainContentView.MainContentFeature {
    @MainActor
    private func handle(_ action: MainContentView.Action) async {
        switch action {
        case .updateQuestion(let text):
            set(\.questionText, to: text)
            
        case .processQuestion(let question, let project):
            await processQuestion(question, for: project)
            
        case .clearResponse:
            set(\.responseText, to: "")
            set(\.errorMessage, to: nil)

        case .copyResponse:
            copyResponseToClipboard()
        }
    }
    
    private func processQuestion(
        _ question: String,
        for project: Project
    ) async {
        guard !question.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else { return }
        
        set(\.isProcessing, to: true)
        set(\.errorMessage, to: nil)
        set(\.promptText, to: state.questionText)
        
        do {
            let response = try await foundationsManager.processQuestion(question, for: project)
            set(\.responseText, to: response)
            set(\.questionText, to: "")
        } catch {
            set(\.errorMessage, to: error.localizedDescription)
            set(\.responseText, to: "")
        }
        
        set(\.isProcessing, to: false)
    }
    
    private func copyResponseToClipboard() {
        let responseText = value(\.responseText)
        guard !responseText.isEmpty else { return }
        
        let formattedText = formatResponseForCopy(responseText)
        
        let pasteboard = NSPasteboard.general
        pasteboard.clearContents()
        pasteboard.setString(formattedText, forType: .string)
    }

    private func formatResponseForCopy(
        _ text: String
    ) -> String {
        let timestamp = Date().formatted(
            date: .abbreviated,
            time: .shortened
        )
        
        return """
        AI Response - \(timestamp)
        ═══════════════════════════════════════
        
        \(text)
        
        ═══════════════════════════════════════
        Generated by Parrot AI Assistant
        """
    }
}
